
use device: cuda
Model(
  (conv1): Conv2d(3, 6, kernel_size=(5, 5), stride=(1, 1))
  (bn1): BatchNorm2d()
  (relu1): ReLU()
  (dropout1): Dropout()
  (maxp1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))
  (bn2): BatchNorm2d()
  (relu2): ReLU()
  (dropout2): Dropout()
  (maxp2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (fc): Linear(in_features=400, out_features=10, bias=True)
  (loss): CrossEntropyLoss()
)
Traceback (most recent call last):
  File "/home/chen/ANN/2023-HW2/codes/cnn/main.py", line 140, in <module>
    val_acc, val_loss = valid_epoch(mlp_model, X_val, y_val)
  File "/home/chen/ANN/2023-HW2/codes/cnn/main.py", line 85, in valid_epoch
    loss_, acc_ = model(X_batch, y_batch)
  File "/home/chen/anaconda3/envs/d2l/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/chen/ANN/2023-HW2/codes/cnn/model.py", line 87, in forward
    y_hat = self.bn1(y_hat)
  File "/home/chen/anaconda3/envs/d2l/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/chen/ANN/2023-HW2/codes/cnn/model.py", line 35, in forward
    output = self.weight * (input - self.running_mean) / torch.sqrt(self.running_var + 1e-5) + self.bias
RuntimeError: The size of tensor a (28) must match the size of tensor b (6) at non-singleton dimension 3